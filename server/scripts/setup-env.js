/**
 * Environment Setup Script
 * 
 * This script creates or updates the .env file with necessary environment variables
 * Run with: node scripts/setup-env.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const crypto = require('crypto');
const { execSync } = require('child_process');

// Path to .env file
const envPath = path.join(__dirname, '..', '.env');
const envExamplePath = path.join(__dirname, '..', '.env.example');

// Default environment variables
const defaultEnv = {
  // MongoDB
  MONGODB_URI: 'mongodb://localhost:27017/lms',
  
  // JWT
  JWT_SECRET: crypto.randomBytes(32).toString('hex'),
  JWT_EXPIRE: '7d',
  
  // Server
  PORT: '5000',
  NODE_ENV: 'development',
  
  // Frontend URL
  FRONTEND_URL: 'http://localhost:3000'
};

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Promisify readline question
const question = (query) => new Promise((resolve) => rl.question(query, resolve));

// Check if MongoDB is installed locally
const checkMongoDBLocal = () => {
  try {
    if (process.platform === 'win32') {
      // Windows - check for MongoDB service
      try {
        execSync('sc query MongoDB', { stdio: 'ignore' });
        return true;
      } catch (error) {
        return false;
      }
    } else {
      // Linux/MacOS - check for mongod process
      try {
        execSync('pgrep mongod', { stdio: 'ignore' });
        return true;
      } catch (error) {
        return false;
      }
    }
  } catch (error) {
    return false;
  }
};

// Create or update environment file
const setupEnv = async () => {
  console.log('üîß Setting up environment variables');
  console.log('==================================');
  
  // Check if .env file exists
  const envExists = fs.existsSync(envPath);
  let currentEnv = {};
  
  if (envExists) {
    console.log('Found existing .env file');
    const envContent = fs.readFileSync(envPath, 'utf8');
    
    // Parse existing environment variables
    envContent.split('\n').forEach(line => {
      if (line && !line.startsWith('#')) {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
          currentEnv[key.trim()] = valueParts.join('=').trim();
        }
      }
    });
  } else {
    console.log('No existing .env file found. Creating a new one.');
  }
  
  // Combine current with default
  const newEnv = { ...defaultEnv, ...currentEnv };
  
  // Ask for MongoDB URI
  console.log('\nüóÑÔ∏è  MongoDB Configuration');
  console.log('------------------------');
  
  const hasLocalMongo = checkMongoDBLocal();
  
  if (hasLocalMongo) {
    console.log('‚úÖ Local MongoDB installation detected');
  } else {
    console.log('‚ö†Ô∏è  Local MongoDB installation not detected');
  }
  
  if (newEnv.MONGODB_URI && newEnv.MONGODB_URI !== defaultEnv.MONGODB_URI) {
    console.log(`Current MongoDB URI: ${newEnv.MONGODB_URI.substring(0, newEnv.MONGODB_URI.indexOf('@') > 0 ? newEnv.MONGODB_URI.indexOf('@') : 20)}...`);
  }
  
  const useMongoAtlas = await question(
    'Do you want to use MongoDB Atlas instead of a local MongoDB? (y/n): '
  );
  
  if (useMongoAtlas.toLowerCase() === 'y') {
    const mongoURI = await question(
      'Enter your MongoDB Atlas connection string (mongodb+srv://...): '
    );
    
    if (mongoURI) {
      newEnv.MONGODB_URI = mongoURI;
    } else {
      console.log('No MongoDB Atlas URI provided. Using current/default setting.');
    }
  } else if (!hasLocalMongo && !newEnv.MONGODB_URI.includes('mongodb+srv')) {
    console.log('‚ö†Ô∏è  Warning: No local MongoDB detected. You may need to install MongoDB locally or use MongoDB Atlas.');
  }
  
  // Ask for port
  console.log('\nüñ•Ô∏è  Server Configuration');
  console.log('----------------------');
  
  const port = await question(
    `HTTP port for server (default: ${newEnv.PORT}): `
  );
  
  if (port) {
    newEnv.PORT = port;
  }
  
  // Ask for frontend URL
  const frontendUrl = await question(
    `Frontend URL for CORS (default: ${newEnv.FRONTEND_URL}): `
  );
  
  if (frontendUrl) {
    newEnv.FRONTEND_URL = frontendUrl;
  }
  
  // Generate new JWT secret?
  if (newEnv.JWT_SECRET === defaultEnv.JWT_SECRET || await question(
    'Generate new JWT secret? This will invalidate all existing tokens. (y/n): '
  ) === 'y') {
    newEnv.JWT_SECRET = crypto.randomBytes(32).toString('hex');
    console.log('Generated new JWT secret.');
  }
  
  // Build .env content
  let envContent = '# Environment Variables\n';
  envContent += '# Generated by setup-env.js script\n';
  envContent += `# Last updated: ${new Date().toISOString()}\n\n`;
  
  // MongoDB section
  envContent += '# MongoDB Configuration\n';
  envContent += `MONGODB_URI=${newEnv.MONGODB_URI}\n\n`;
  
  // JWT section
  envContent += '# JWT Configuration\n';
  envContent += `JWT_SECRET=${newEnv.JWT_SECRET}\n`;
  envContent += `JWT_EXPIRE=${newEnv.JWT_EXPIRE}\n\n`;
  
  // Server section
  envContent += '# Server Configuration\n';
  envContent += `PORT=${newEnv.PORT}\n`;
  envContent += `NODE_ENV=${newEnv.NODE_ENV}\n\n`;
  
  // Frontend section
  envContent += '# Frontend URL for CORS\n';
  envContent += `FRONTEND_URL=${newEnv.FRONTEND_URL}\n`;
  
  // Write .env file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log(`\n‚úÖ .env file ${envExists ? 'updated' : 'created'} successfully at: ${envPath}`);
  } catch (error) {
    console.error(`\n‚ùå Error writing .env file: ${error.message}`);
  }
  
  // Create .env.example file if it doesn't exist
  if (!fs.existsSync(envExamplePath)) {
    try {
      let exampleContent = '# MongoDB Configuration\n';
      exampleContent += 'MONGODB_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/lms?retryWrites=true&w=majority\n\n';
      exampleContent += '# JWT Configuration\n';
      exampleContent += 'JWT_SECRET=your_secure_jwt_secret_key\n';
      exampleContent += 'JWT_EXPIRE=7d\n\n';
      exampleContent += '# Server Configuration\n';
      exampleContent += 'PORT=5000\n';
      exampleContent += 'NODE_ENV=development\n\n';
      exampleContent += '# Frontend URL for CORS\n';
      exampleContent += 'FRONTEND_URL=http://localhost:3000\n';
      
      fs.writeFileSync(envExamplePath, exampleContent);
      console.log(`‚úÖ .env.example file created successfully at: ${envExamplePath}`);
    } catch (error) {
      console.error(`‚ùå Error writing .env.example file: ${error.message}`);
    }
  }
  
  // Next steps
  console.log('\nüìã Next Steps:');
  console.log('1. Install dependencies if you haven\'t already: npm install');
  console.log('2. Run the test database script: node scripts/test-mongodb.js');
  console.log('3. Seed the database with sample data: node scripts/seed-database.js');
  console.log('4. Start the server: npm run dev');
  
  rl.close();
};

// Run setup
setupEnv()
  .catch(error => {
    console.error('Script error:', error);
    rl.close();
  }); 
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { StarIcon, UserIcon, TagIcon, AcademicCapIcon } from '@heroicons/react/24/solid';
import { MagnifyingGlassIcon, FunnelIcon } from '@heroicons/react/24/outline';

interface Course {
  _id: string;
  title: string;
  description: string;
  thumbnail: {
    url: string;
  };
  price: number;
  level: string;
  category: string;
  ratings: {
    rating: number;
    count: number;
    average: number;
  };
  instructor: {
    name: string;
    avatar: string;
  };
  enrolledStudents: number;
}

export default function CoursesPage() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [filteredCourses, setFilteredCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedLevel, setSelectedLevel] = useState('');
  const [selectedPrice, setSelectedPrice] = useState('');
  
  const [categories, setCategories] = useState<string[]>([]);
  const [levels, setLevels] = useState<string[]>(['beginner', 'intermediate', 'advanced']);

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const res = await fetch('/api/v1/courses');
        
        if (!res.ok) {
          throw new Error('Failed to fetch courses');
        }
        
        const data = await res.json();
        setCourses(data.data);
        setFilteredCourses(data.data);
        
        // Extract unique categories
        const uniqueCategories = [...new Set(data.data.map((course: Course) => course.category))] as string[];
        setCategories(uniqueCategories);
      } catch (err) {
        setError('Failed to load courses');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchCourses();
  }, []);

  useEffect(() => {
    let result = courses;
    
    // Apply search filter
    if (searchTerm) {
      result = result.filter(course => 
        course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        course.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Apply category filter
    if (selectedCategory) {
      result = result.filter(course => course.category === selectedCategory);
    }
    
    // Apply level filter
    if (selectedLevel) {
      result = result.filter(course => course.level === selectedLevel);
    }
    
    // Apply price filter
    if (selectedPrice === 'free') {
      result = result.filter(course => course.price === 0);
    } else if (selectedPrice === 'paid') {
      result = result.filter(course => course.price > 0);
    }
    
    setFilteredCourses(result);
  }, [searchTerm, selectedCategory, selectedLevel, selectedPrice, courses]);

  const clearFilters = () => {
    setSearchTerm('');
    setSelectedCategory('');
    setSelectedLevel('');
    setSelectedPrice('');
  };

  if (loading) {
    return (
      <div className="min-h-[calc(100vh-64px)] flex items-center justify-center bg-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0091ff] mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading courses...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white min-h-[calc(100vh-64px)] py-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900">Courses</h1>
          <p className="mt-1 text-gray-500">
            Browse our collection of high-quality courses
          </p>
        </div>

        {error && (
          <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Filters sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white shadow-md rounded-lg overflow-hidden sticky top-20">
              <div className="px-4 py-5 sm:px-6 border-b border-gray-200 flex justify-between items-center">
                <h2 className="text-lg font-medium text-gray-900">Filters</h2>
                <button 
                  onClick={clearFilters}
                  className="text-sm text-[#0091ff] hover:text-blue-600"
                >
                  Clear all
                </button>
              </div>
              <div className="px-4 py-5 sm:p-6 space-y-6">
                {/* Search box */}
                <div>
                  <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                    Search
                  </label>
                  <div className="relative rounded-md shadow-sm">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                    </div>
                    <input
                      type="text"
                      name="search"
                      id="search"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-[#0091ff] focus:border-[#0091ff]"
                      placeholder="Search courses..."
                    />
                  </div>
                </div>
                
                {/* Category filter */}
                <div>
                  <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                    Category
                  </label>
                  <select
                    id="category"
                    name="category"
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="block w-full py-2 pl-3 pr-10 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-[#0091ff] focus:border-[#0091ff]"
                  >
                    <option value="">All Categories</option>
                    {categories.map((category) => (
                      <option key={category} value={category}>
                        {category}
                      </option>
                    ))}
                  </select>
                </div>
                
                {/* Level filter */}
                <div>
                  <label htmlFor="level" className="block text-sm font-medium text-gray-700 mb-1">
                    Level
                  </label>
                  <select
                    id="level"
                    name="level"
                    value={selectedLevel}
                    onChange={(e) => setSelectedLevel(e.target.value)}
                    className="block w-full py-2 pl-3 pr-10 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-[#0091ff] focus:border-[#0091ff]"
                  >
                    <option value="">All Levels</option>
                    {levels.map((level) => (
                      <option key={level} value={level}>
                        {level.charAt(0).toUpperCase() + level.slice(1)}
                      </option>
                    ))}
                  </select>
                </div>
                
                {/* Price filter */}
                <div>
                  <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-1">
                    Price
                  </label>
                  <select
                    id="price"
                    name="price"
                    value={selectedPrice}
                    onChange={(e) => setSelectedPrice(e.target.value)}
                    className="block w-full py-2 pl-3 pr-10 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-[#0091ff] focus:border-[#0091ff]"
                  >
                    <option value="">All Prices</option>
                    <option value="free">Free</option>
                    <option value="paid">Paid</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
          
          {/* Course list */}
          <div className="lg:col-span-3">
            {filteredCourses.length === 0 ? (
              <div className="bg-white shadow-md rounded-lg p-8 text-center">
                <FunnelIcon className="h-12 w-12 text-gray-400 mx-auto" />
                <h3 className="mt-2 text-lg font-medium text-gray-900">No courses found</h3>
                <p className="mt-1 text-gray-500">
                  Try adjusting your search or filter criteria
                </p>
                <button
                  onClick={clearFilters}
                  className="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-[#0091ff] hover:bg-blue-600"
                >
                  Clear filters
                </button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {filteredCourses.map((course) => (
                  <Link 
                    key={course._id} 
                    href={`/courses/${course._id}`}
                    className="block bg-white shadow-md rounded-lg overflow-hidden hover:shadow-lg transition-shadow duration-200"
                  >
                    <div className="h-48 relative">
                      <Image
                        src={course.thumbnail?.url || 'https://placehold.co/400x300/0091ff/FFFFFF/png?text=Course'}
                        alt={course.title}
                        fill
                        className="object-cover"
                      />
                      {course.price === 0 ? (
                        <span className="absolute top-3 right-3 bg-green-500 text-white text-xs px-2 py-1 rounded-md">
                          Free
                        </span>
                      ) : (
                        <span className="absolute top-3 right-3 bg-gray-900 text-white text-xs px-2 py-1 rounded-md">
                          ${course.price.toFixed(2)}
                        </span>
                      )}
                    </div>
                    <div className="p-4">
                      <div className="flex justify-between items-start">
                        <h3 className="text-lg font-medium text-gray-900 line-clamp-2">{course.title}</h3>
                      </div>
                      <p className="mt-1 text-sm text-gray-500 line-clamp-2">{course.description}</p>
                      
                      <div className="mt-2 flex items-center text-sm text-gray-500">
                        <AcademicCapIcon className="h-4 w-4 text-gray-400 mr-1" />
                        <span className="mr-3">{course.level.charAt(0).toUpperCase() + course.level.slice(1)}</span>
                        
                        <TagIcon className="h-4 w-4 text-gray-400 mr-1" />
                        <span>{course.category}</span>
                      </div>
                      
                      <div className="mt-3 flex items-center justify-between">
                        <div className="flex items-center">
                          <div className="flex items-center">
                            {course.ratings?.average ? (
                              <>
                                <StarIcon className="h-4 w-4 text-yellow-400" />
                                <span className="ml-1 text-sm text-gray-600">
                                  {course.ratings.average.toFixed(1)}
                                </span>
                                <span className="ml-1 text-xs text-gray-500">
                                  ({course.ratings.count})
                                </span>
                              </>
                            ) : (
                              <span className="text-sm text-gray-500">No ratings</span>
                            )}
                          </div>
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-500">
                          <UserIcon className="h-4 w-4 text-gray-400 mr-1" />
                          <span>{course.enrolledStudents || 0} students</span>
                        </div>
                      </div>
                      
                      {course.instructor && (
                        <div className="mt-4 pt-4 border-t border-gray-100 flex items-center">
                          <div className="h-6 w-6 rounded-full bg-gray-200 flex-shrink-0 mr-2 overflow-hidden">
                            {course.instructor.avatar ? (
                              <Image
                                src={course.instructor.avatar}
                                alt={course.instructor.name}
                                width={24}
                                height={24}
                                className="h-full w-full object-cover"
                              />
                            ) : (
                              <UserIcon className="h-4 w-4 text-gray-400 mx-auto my-1" />
                            )}
                          </div>
                          <span className="text-sm text-gray-600">{course.instructor.name}</span>
                        </div>
                      )}
                    </div>
                  </Link>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
} 
/**
 * Client Environment Setup Script
 * 
 * This script ensures the client has the correct environment configuration
 * Run with: node setup-env.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Define colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

console.log(`${colors.cyan}=== Client Environment Setup ====${colors.reset}`);

// Check server status to determine the best API URL
function checkServerStatus(url) {
  try {
    const result = execSync(`curl -s -o /dev/null -w "%{http_code}" ${url}/api/health`, { timeout: 3000 });
    return result.toString().trim() === '200';
  } catch (error) {
    return false;
  }
}

// Find the correct API URL
function findWorkingApiUrl() {
  console.log(`${colors.blue}Detecting API server...${colors.reset}`);
  
  // Try different potential server URLs
  const apiUrls = [
    'http://localhost:5000',
    'http://localhost:5001',
    'http://localhost:3001',
  ];
  
  for (const url of apiUrls) {
    console.log(`${colors.blue}Checking ${url}...${colors.reset}`);
    
    if (checkServerStatus(url)) {
      console.log(`${colors.green}✅ API server found at: ${url}${colors.reset}`);
      return url;
    }
  }
  
  console.log(`${colors.yellow}⚠️ No active API server found. Using default value.${colors.reset}`);
  return 'http://localhost:5000'; // Default fallback
}

// Create .env.local file
function createEnvFile(apiUrl) {
  const envLocalPath = path.join(__dirname, '.env.local');
  
  // Base environment configuration
  const envConfig = {
    'NEXT_PUBLIC_API_BASE_URL': apiUrl,
    'NEXT_PUBLIC_APP_ENV': 'development',
    'NEXT_PUBLIC_APP_NAME': 'iremehub LMS',
    'NEXT_PUBLIC_JWT_EXPIRE': '7d'
  };
  
  // Generate content
  let envFileContent = '# This file was generated by setup-env.js\n';
  envFileContent += '# You can modify these values manually if needed\n\n';
  
  Object.entries(envConfig).forEach(([key, value]) => {
    envFileContent += `${key}=${value}\n`;
  });
  
  // Write file
  try {
    fs.writeFileSync(envLocalPath, envFileContent);
    console.log(`${colors.green}✅ Created .env.local file with the following configuration:${colors.reset}`);
    console.log(`${colors.cyan}${envFileContent}${colors.reset}`);
  } catch (error) {
    console.log(`${colors.red}❌ Error creating .env.local file: ${error.message}${colors.reset}`);
  }
}

// Check for production build
function checkForProductionBuild() {
  const nextConfigPath = path.join(__dirname, 'next.config.js');
  
  if (fs.existsSync(nextConfigPath)) {
    const config = fs.readFileSync(nextConfigPath, 'utf8');
    
    if (config.includes('NODE_ENV') && config.includes('production')) {
      console.log(`${colors.yellow}⚠️ next.config.js contains production settings.${colors.reset}`);
      console.log(`${colors.yellow}This could affect your development environment.${colors.reset}`);
    }
  }
}

// Main function
function main() {
  // Find the active API URL
  const apiUrl = findWorkingApiUrl();
  
  // Create/update environment file
  createEnvFile(apiUrl);
  
  // Additional checks
  checkForProductionBuild();
  
  console.log(`\n${colors.green}✅ Environment setup complete!${colors.reset}`);
  console.log(`${colors.blue}You can now start the client with: npm run dev${colors.reset}`);
}

// Run main function
main(); 